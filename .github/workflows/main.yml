# This is a basic workflow to help you get started with Actions

name: CI

concurrency:
    group: ci
    cancel-in-progress: true

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Builds docker images and pushes them to GHCR
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push dev-env image
        uses: docker/build-push-action@v2.7.0
        with:
          push: true
          context: .
          tags: ghcr.io/uccnetsoc/netsoc.co:dev-env, ghcr.io/uccnetsoc/netsoc.co:${{ github.sha }}-dev-env
          target: dev

      - name: Build and push prod image
        uses: docker/build-push-action@v2.7.0
        with:
          push: true
          context: .
          tags: ghcr.io/uccnetsoc/netsoc.co:latest, ghcr.io/uccnetsoc/netsoc.co:${{ github.sha }}
          
  deploy:
    needs: [build]
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Ansible playbook runner via SSH Action
        uses: UCCNetsoc/ansible-action@main
        with:
          tags: "static-websites"
          control_host: ${{ secrets.CONTROL_HOST }}
          control_user: ${{ secrets.CONTROL_USER }}
          control_ssh_key: ${{ secrets.SSH_KEY }}
          directory: ${{ secrets.CONTROL_DIRECTORY }}
          vault_pass: ${{ secrets.VAULT_PASS }}
          port: ${{ secrets.CONTROL_PORT }}
